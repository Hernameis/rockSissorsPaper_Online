package com.tanktank.client;

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.Label;
import java.awt.Panel;
import java.awt.TextField;
import java.io.*;
import java.awt.*;
import java.awt.event.*;
import java.net.*;
import java.util.*;

import com.tanktank.client.panel.MainPanel;

public class ClientWindow extends Frame{
	String serverIP;
	
	Panel mainPanel;
	
	Button playButtonInRobby;
	Button rankingButtonInRobby;
	Button exitButtonInRobby;
	Button backButtonInRankingBoard;
	
	Socket sock;
	InputStream is;
	OutputStream os;

	ClientWindow(){
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				dispose();
			}
		});
		mainPanel=new MainPanel(this);

		
		add(mainPanel);
		setBounds(100,100,500,500);
		setVisible(true);
		this.setResizable(false);
	}
	

	
	public void ipConfirmed(String inputIp){
		if(serverIP==null){	// 이게 아니라 ip가 널이 아니면 창을 안열어야지...
			serverIP=inputIp;
			try {
				sock=new Socket(serverIP, 5000);	
				
//			sock.close();	// 클로즈를 종료할 때 해야 하나?
			} catch (UnknownHostException e1) {
				e1.printStackTrace();
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}		
	}
	
	public void enterPlayGame(){
		mainPanel.removeAll();
		
		mainPanel.add(new Button("playing game display"));
		mainPanel.revalidate();
		
	}
	
	public void viewRankingBoard() throws UnknownHostException, IOException{
		
		rankingBoardPanel=new Panel();
		rankingBoardPanel.setLayout(new BorderLayout());
		Label rankingBoardLabel=new Label("Ranking Board");
		Panel specInRankingPanel=new Panel();
		backButtonInRankingBoard=new Button("back_in_rankingBoard");
		
		specInRankingPanel.setLayout(new GridLayout(10,6));
		Label[] rankingLa=new Label[60];
		rankingLa[0]=new Label("rank");
		rankingLa[1]=new Label("nickname");
		rankingLa[2]=new Label("score");
		rankingLa[3]=new Label("win ratio");
		rankingLa[4]=new Label("wins");
		rankingLa[5]=new Label("loses");
		
		for(int i=6; i<60; i++){
			if(i%6==0){
				rankingLa[i]=new Label(""+(i-5));
			}else if(i%6==1){
				rankingLa[i]=new Label("name"+(i-5));
			}else if(i%6==2){
				rankingLa[i]=new Label(""+i);
			}else if(i%6==3){
				rankingLa[i]=new Label(""+i+"%");
			}else if(i%6==4){
				rankingLa[i]=new Label(""+(i+10));
			}else if(i%6==5){
				rankingLa[i]=new Label(""+(i+7));
			}
		}
		for(int i=0; i<60; i++){
			specInRankingPanel.add(rankingLa[i]);
		}
		
		backButtonInRankingBoard.addActionListener(new ActionListener() {			
			@Override
			public void actionPerformed(ActionEvent e) {
				enterGameRobby();
			}
		});
		
		rankingBoardPanel.add(rankingBoardLabel, BorderLayout.NORTH);
		rankingBoardPanel.add(specInRankingPanel, BorderLayout.CENTER);
		rankingBoardPanel.add(backButtonInRankingBoard, BorderLayout.SOUTH);

		mainPanel.removeAll();
		mainPanel.add(rankingBoardPanel);
		this.revalidate();
	}
	
}
